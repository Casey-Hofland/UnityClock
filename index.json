{
  "api/System.html": {
    "href": "api/System.html",
    "title": "Namespace System | Unity Clock",
    "keywords": "Namespace System Structs TimeOnly Represents a time of day, as would be read from a clock, within the range 00:00:00 to 23:59:59.9999999."
  },
  "api/System.TimeOnly.html": {
    "href": "api/System.TimeOnly.html",
    "title": "Struct TimeOnly | Unity Clock",
    "keywords": "Struct TimeOnly Represents a time of day, as would be read from a clock, within the range 00:00:00 to 23:59:59.9999999. Implements IComparable IComparable < TimeOnly > IEquatable < TimeOnly > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System Assembly : cs.temp.dll.dll Syntax public readonly struct TimeOnly : IComparable, IComparable<TimeOnly>, IEquatable<TimeOnly> Constructors TimeOnly(Int32, Int32) Initializes a new instance of the timeOnly structure to the specified hour and the minute. Declaration public TimeOnly(int hour, int minute) Parameters Type Name Description Int32 hour The hours (0 through 23). Int32 minute The minutes (0 through 59). TimeOnly(Int32, Int32, Int32) Initializes a new instance of the timeOnly structure to the specified hour, minute, and second. Declaration public TimeOnly(int hour, int minute, int second) Parameters Type Name Description Int32 hour The hours (0 through 23). Int32 minute The minutes (0 through 59). Int32 second The seconds (0 through 59). TimeOnly(Int32, Int32, Int32, Int32) Initializes a new instance of the timeOnly structure to the specified hour, minute, second, and millisecond. Declaration public TimeOnly(int hour, int minute, int second, int millisecond) Parameters Type Name Description Int32 hour The hours (0 through 23). Int32 minute The minutes (0 through 59). Int32 second The seconds (0 through 59). Int32 millisecond The millisecond (0 through 999). TimeOnly(Int64) Initializes a new instance of the TimeOnly structure using a specified number of ticks. Declaration public TimeOnly(long ticks) Parameters Type Name Description Int64 ticks A time of day expressed in the number of 100-nanosecond units since 00:00:00.0000000. Properties Hour Gets the hour component of the time represented by this instance. Declaration public readonly int Hour { get; } Property Value Type Description Int32 MaxValue Represents the largest possible value of TimeOnly. Declaration public static readonly TimeOnly MaxValue { get; } Property Value Type Description TimeOnly Millisecond Gets the millisecond component of the time represented by this instance. Declaration public readonly int Millisecond { get; } Property Value Type Description Int32 Minute Gets the minute component of the time represented by this instance. Declaration public readonly int Minute { get; } Property Value Type Description Int32 MinValue Represents the smallest possible value of TimeOnly. Declaration public static readonly TimeOnly MinValue { get; } Property Value Type Description TimeOnly Second Gets the second component of the time represented by this instance. Declaration public readonly int Second { get; } Property Value Type Description Int32 Ticks Gets the number of ticks that represent the time of this instance. Declaration public readonly long Ticks { get; } Property Value Type Description Int64 Methods Add(TimeSpan) Returns a new TimeOnly that adds the value of the specified TimeSpan to the value of this instance. Declaration public readonly TimeOnly Add(TimeSpan value) Parameters Type Name Description TimeSpan value A positive or negative time interval. Returns Type Description TimeOnly An object whose value is the sum of the time represented by this instance and the time interval represented by value. Add(TimeSpan, out Int32) Returns a new TimeOnly that adds the value of the specified TimeSpan to the value of this instance. If the result wraps past the end of the day, this method will return the number of excess days as an out parameter. Declaration public readonly TimeOnly Add(TimeSpan value, out int wrappedDays) Parameters Type Name Description TimeSpan value A positive or negative time interval. Int32 wrappedDays When this method returns, contains the number of excess days if any that resulted from wrapping during this addition operation. Returns Type Description TimeOnly An object whose value is the sum of the time represented by this instance and the time interval represented by value. AddHours(Double) Returns a new TimeOnly that adds the specified number of hours to the value of this instance. Declaration public readonly TimeOnly AddHours(double value) Parameters Type Name Description Double value A number of whole and fractional hours. The value parameter can be negative or positive. Returns Type Description TimeOnly An object whose value is the sum of the time represented by this instance and the number of hours represented by value. AddHours(Double, out Int32) Returns a new TimeOnly that adds the specified number of hours to the value of this instance. If the result wraps past the end of the day, this method will return the number of excess days as an out parameter. Declaration public readonly TimeOnly AddHours(double value, out int wrappedDays) Parameters Type Name Description Double value A number of whole and fractional hours. The value parameter can be negative or positive. Int32 wrappedDays When this method returns, contains the number of excess days if any that resulted from wrapping during this addition operation. Returns Type Description TimeOnly An object whose value is the sum of the time represented by this instance and the number of hours represented by value. AddMinutes(Double) Returns a new TimeOnly that adds the specified number of minutes to the value of this instance. Declaration public readonly TimeOnly AddMinutes(double value) Parameters Type Name Description Double value A number of whole and fractional minutes. The value parameter can be negative or positive. Returns Type Description TimeOnly An object whose value is the sum of the time represented by this instance and the number of minutes represented by value. AddMinutes(Double, out Int32) Returns a new TimeOnly that adds the specified number of minutes to the value of this instance. If the result wraps past the end of the day, this method will return the number of excess days as an out parameter. Declaration public readonly TimeOnly AddMinutes(double value, out int wrappedDays) Parameters Type Name Description Double value A number of whole and fractional minutes. The value parameter can be negative or positive. Int32 wrappedDays When this method returns, contains the number of excess days if any that resulted from wrapping during this addition operation. Returns Type Description TimeOnly An object whose value is the sum of the time represented by this instance and the number of minutes represented by value. CompareTo(Object) Compares the value of this instance to a specified object that contains a specified TimeOnly value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified TimeOnly value. Declaration public readonly int CompareTo(object value) Parameters Type Name Description Object value A boxed object to compare, or null. Returns Type Description Int32 A signed number indicating the relative values of this instance and the value parameter. Less than zero if this instance is earlier than value. Zero if this instance is the same as value. Greater than zero if this instance is later than value. CompareTo(TimeOnly) Compares the value of this instance to a specified TimeOnly value and indicates whether this instance is earlier than, the same as, or later than the specified TimeOnly value. Declaration public readonly int CompareTo(TimeOnly value) Parameters Type Name Description TimeOnly value The object to compare to the current instance. Returns Type Description Int32 A signed number indicating the relative values of this instance and the value parameter. Less than zero if this instance is earlier than value. Zero if this instance is the same as value. Greater than zero if this instance is later than value. Deconstruct(out Int32, out Int32) Deconstructs TimeOnly by Hour and Minute . Declaration public readonly void Deconstruct(out int hour, out int minute) Parameters Type Name Description Int32 hour Deconstructed parameter for Hour . Int32 minute Deconstructed parameter for Minute . Deconstruct(out Int32, out Int32, out Int32) Deconstructs TimeOnly by Hour , Minute and Second . Declaration public readonly void Deconstruct(out int hour, out int minute, out int second) Parameters Type Name Description Int32 hour Deconstructed parameter for Hour . Int32 minute Deconstructed parameter for Minute . Int32 second Deconstructed parameter for Second . Deconstruct(out Int32, out Int32, out Int32, out Int32) Deconstructs TimeOnly by Hour , Minute , Second and Millisecond . Declaration public readonly void Deconstruct(out int hour, out int minute, out int second, out int millisecond) Parameters Type Name Description Int32 hour Deconstructed parameter for Hour . Int32 minute Deconstructed parameter for Minute . Int32 second Deconstructed parameter for Second . Int32 millisecond Deconstructed parameter for Millisecond . Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override readonly bool Equals(object value) Parameters Type Name Description Object value The object to compare to this instance. Returns Type Description Boolean true if value is an instance of TimeOnly and equals the value of this instance; otherwise, false. Overrides ValueType.Equals(Object) Equals(TimeOnly) Returns a value indicating whether the value of this instance is equal to the value of the specified TimeOnly instance. Declaration public readonly bool Equals(TimeOnly value) Parameters Type Name Description TimeOnly value The object to compare to this instance. Returns Type Description Boolean true if the value parameter equals the value of this instance; otherwise, false. FromDateTime(DateTime) Constructs a TimeOnly object from a DateTime representing the time of the day in this DateTime object. Declaration public static TimeOnly FromDateTime(DateTime dateTime) Parameters Type Name Description DateTime dateTime The time DateTime object to extract the time of the day from. Returns Type Description TimeOnly A TimeOnly object representing time of the day specified in the DateTime object. FromTimeSpan(TimeSpan) Constructs a TimeOnly object from a TimeSpan representing the time elapsed since midnight. Declaration public static TimeOnly FromTimeSpan(TimeSpan timeSpan) Parameters Type Name Description TimeSpan timeSpan The time interval measured since midnight. This value has to be positive and not exceeding the time of the day. Returns Type Description TimeOnly A TimeOnly object representing the time elapsed since midnight using the timeSpan value. GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() IsBetween(TimeOnly, TimeOnly) Determines if a time falls within the range provided. Supports both \"normal\" ranges such as 10:00-12:00, and ranges that span midnight such as 23:00-01:00. Declaration public readonly bool IsBetween(TimeOnly start, TimeOnly end) Parameters Type Name Description TimeOnly start The starting time of day, inclusive. TimeOnly end The ending time of day, exclusive. Returns Type Description Boolean True, if the time falls within the range, false otherwise. Remarks If start and end are equal, this method returns false, meaning there is zero elapsed time between the two values. If you wish to treat such cases as representing one or more whole days, then first check for equality before calling this method. ToLongTimeString() Converts the value of the current TimeOnly object to its equivalent long date string representation. Declaration public readonly string ToLongTimeString() Returns Type Description String A string that contains the long time string representation of the current TimeOnly object. ToShortTimeString() Converts the value of the current TimeOnly object to its equivalent short time string representation. Declaration public readonly string ToShortTimeString() Returns Type Description String A string that contains the short time string representation of the current TimeOnly object. ToString() Converts the value of the current TimeOnly object to its equivalent string representation using the formatting conventions of the current culture. The TimeOnly object will be formatted in short form. Declaration public override readonly string ToString() Returns Type Description String A string that contains the short time string representation of the current TimeOnly object. Overrides ValueType.ToString() ToString(IFormatProvider) Converts the value of the current TimeOnly object to its equivalent string representation using the specified culture-specific format information. Declaration public readonly string ToString(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description String A string representation of value of the current TimeOnly object as specified by provider. ToString(String) Converts the value of the current TimeOnly object to its equivalent string representation using the specified format and the formatting conventions of the current culture. Declaration public readonly string ToString(string format) Parameters Type Name Description String format A standard or custom time format string. Returns Type Description String A string representation of value of the current TimeOnly object as specified by format. Remarks The accepted standard formats are 'r', 'R', 'o', 'O', 't' and 'T'. ToString(String, IFormatProvider) Converts the value of the current TimeOnly object to its equivalent string representation using the specified culture-specific format information. Declaration public readonly string ToString(string format, IFormatProvider provider) Parameters Type Name Description String format A standard or custom time format string. IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description String A string representation of value of the current TimeOnly object as specified by format and provider. Remarks The accepted standard formats are 'r', 'R', 'o', 'O', 't' and 'T'. ToTimeSpan() Convert the current TimeOnly instance to a TimeSpan object. Declaration public readonly TimeSpan ToTimeSpan() Returns Type Description TimeSpan A TimeSpan object spanning to the time specified in the current TimeOnly object. Operators Equality(TimeOnly, TimeOnly) Determines whether two specified instances of TimeOnly are equal. Declaration public static bool operator ==(TimeOnly left, TimeOnly right) Parameters Type Name Description TimeOnly left The first object to compare. TimeOnly right The second object to compare. Returns Type Description Boolean true if left and right represent the same time; otherwise, false. GreaterThan(TimeOnly, TimeOnly) Determines whether one specified TimeOnly is later than another specified TimeOnly. Declaration public static bool operator>(TimeOnly left, TimeOnly right) Parameters Type Name Description TimeOnly left The first object to compare. TimeOnly right The second object to compare. Returns Type Description Boolean true if left is later than right; otherwise, false. GreaterThanOrEqual(TimeOnly, TimeOnly) Determines whether one specified TimeOnly represents a time that is the same as or later than another specified TimeOnly. Declaration public static bool operator >=(TimeOnly left, TimeOnly right) Parameters Type Name Description TimeOnly left The first object to compare. TimeOnly right The second object to compare. Returns Type Description Boolean true if left is the same as or later than right; otherwise, false. Inequality(TimeOnly, TimeOnly) Determines whether two specified instances of TimeOnly are not equal. Declaration public static bool operator !=(TimeOnly left, TimeOnly right) Parameters Type Name Description TimeOnly left The first object to compare. TimeOnly right The second object to compare. Returns Type Description Boolean true if left and right do not represent the same time; otherwise, false. LessThan(TimeOnly, TimeOnly) Determines whether one specified TimeOnly is earlier than another specified TimeOnly. Declaration public static bool operator <(TimeOnly left, TimeOnly right) Parameters Type Name Description TimeOnly left The first object to compare. TimeOnly right The second object to compare. Returns Type Description Boolean true if left is earlier than right; otherwise, false. LessThanOrEqual(TimeOnly, TimeOnly) Determines whether one specified TimeOnly represents a time that is the same as or earlier than another specified TimeOnly. Declaration public static bool operator <=(TimeOnly left, TimeOnly right) Parameters Type Name Description TimeOnly left The first object to compare. TimeOnly right The second object to compare. Returns Type Description Boolean true if left is the same as or earlier than right; otherwise, false. Subtraction(TimeOnly, TimeOnly) Gives the elapsed time between two points on a circular clock, which will always be a positive value. Declaration public static TimeSpan operator -(TimeOnly t1, TimeOnly t2) Parameters Type Name Description TimeOnly t1 The first TimeOnly instance. TimeOnly t2 The second TimeOnly instance.. Returns Type Description TimeSpan The elapsed time between t1 and t2. Implements System.IComparable System.IComparable<T> System.IEquatable<T>"
  },
  "api/UnityClock.Clock.html": {
    "href": "api/UnityClock.Clock.html",
    "title": "Class Clock | Unity Clock",
    "keywords": "Class Clock Inheritance Object Clock Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : UnityClock Assembly : cs.temp.dll.dll Syntax public class Clock Fields dayMultiplier Declaration public const float dayMultiplier = 1.15740739E-12F Field Value Type Description Single Properties time The current time on the clock. Declaration public static TimeOnly time { get; set; } Property Value Type Description TimeOnly Methods ElapsedTime(TimeSpan) The elapsed time for a day span since the start of the game. Declaration public static TimeSpan ElapsedTime(TimeSpan daySpan) Parameters Type Name Description TimeSpan daySpan The time it takes for the clock to progress 24 hours. Returns Type Description TimeSpan InverseLerp(TimeOnly, TimeOnly) Determines where time falls between start and end. Declaration public static float InverseLerp(TimeOnly start, TimeOnly end) Parameters Type Name Description TimeOnly start TimeOnly end Returns Type Description Single A value between 0 and 1, representing where time falls between start and end. InverseLerp(TimeOnly, TimeOnly, TimeOnly) Determines where time falls between start and end. Declaration public static float InverseLerp(TimeOnly start, TimeOnly end, TimeOnly time) Parameters Type Name Description TimeOnly start TimeOnly end TimeOnly time Returns Type Description Single A value between 0 and 1, representing where time falls between start and end. InverseLerp(TimeSpan, TimeSpan, TimeSpan) Declaration public static float InverseLerp(TimeSpan start, TimeSpan end, TimeSpan span) Parameters Type Name Description TimeSpan start TimeSpan end TimeSpan span Returns Type Description Single Lerp(TimeOnly, TimeOnly, Single) Declaration public static TimeOnly Lerp(TimeOnly start, TimeOnly end, float t) Parameters Type Name Description TimeOnly start TimeOnly end Single t Returns Type Description TimeOnly Lerp(TimeSpan, TimeSpan, Single) Declaration public static TimeSpan Lerp(TimeSpan start, TimeSpan end, float t) Parameters Type Name Description TimeSpan start TimeSpan end Single t Returns Type Description TimeSpan LerpUnclamped(TimeOnly, TimeOnly, Single) Declaration public static TimeOnly LerpUnclamped(TimeOnly start, TimeOnly end, float t) Parameters Type Name Description TimeOnly start TimeOnly end Single t Returns Type Description TimeOnly LerpUnclamped(TimeSpan, TimeSpan, Single) Declaration public static TimeSpan LerpUnclamped(TimeSpan start, TimeSpan end, float t) Parameters Type Name Description TimeSpan start TimeSpan end Single t Returns Type Description TimeSpan PingPong(TimeOnly) Returns a value between 1 and 0 where 1 is midday and 0 is midnight. Declaration public static float PingPong(TimeOnly time) Parameters Type Name Description TimeOnly time Returns Type Description Single Events timeChanged Invoked whenever the time changes. Declaration [Obsolete] public static event Action<TimeOnly> timeChanged Event Type Type Description Action < TimeOnly >"
  },
  "api/UnityClock.ClockVolume.html": {
    "href": "api/UnityClock.ClockVolume.html",
    "title": "Class ClockVolume | Unity Clock",
    "keywords": "Class ClockVolume A volume component that holds settings for the Clock. Inheritance Object ClockVolume Namespace : UnityClock Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class ClockVolume : VolumeComponent Fields daySpan Declaration public TimeSpanParameter daySpan Field Value Type Description TimeSpanParameter time Declaration public TimeOnlyParameter time Field Value Type Description TimeOnlyParameter Methods OnEnable() Declaration protected override void OnEnable() Override(VolumeComponent, Single) Declaration public override void Override(VolumeComponent state, float interpFactor) Parameters Type Name Description VolumeComponent state Single interpFactor"
  },
  "api/UnityClock.Editor.ClockPreviewControl.html": {
    "href": "api/UnityClock.Editor.ClockPreviewControl.html",
    "title": "Class ClockPreviewControl | Unity Clock",
    "keywords": "Class ClockPreviewControl Inheritance Object ClockPreviewControl Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : UnityClock.Editor Assembly : cs.temp.dll.dll Syntax [Serializable] public class ClockPreviewControl Properties canPreview Declaration public bool canPreview { get; } Property Value Type Description Boolean previewing Declaration public bool previewing { get; set; } Property Value Type Description Boolean time Declaration public TimeOnly time { get; set; } Property Value Type Description TimeOnly Methods OnCreate() Declaration public void OnCreate() OnDestroy() Declaration public void OnDestroy() StartPreview() Declaration public void StartPreview() StopPreview() Declaration public void StopPreview()"
  },
  "api/UnityClock.Editor.ClockToolbar.html": {
    "href": "api/UnityClock.Editor.ClockToolbar.html",
    "title": "Class ClockToolbar | Unity Clock",
    "keywords": "Class ClockToolbar Inheritance Object ClockToolbar Namespace : UnityClock.Editor Assembly : cs.temp.dll.dll Syntax public class ClockToolbar : ToolbarOverlay Constructors ClockToolbar() Declaration public ClockToolbar() Fields clockPreviewControl Declaration public readonly ClockPreviewControl clockPreviewControl Field Value Type Description ClockPreviewControl Methods OnCreated() Declaration public override void OnCreated() OnWillBeDestroyed() Declaration public override void OnWillBeDestroyed()"
  },
  "api/UnityClock.Editor.html": {
    "href": "api/UnityClock.Editor.html",
    "title": "Namespace UnityClock.Editor | Unity Clock",
    "keywords": "Namespace UnityClock.Editor Classes ClockPreviewControl ClockToolbar PreviewTimeElement PreviewTimeLapseElement TemporalAnimationProcessor TimeOnlyDrawer TimeSpanDrawer"
  },
  "api/UnityClock.Editor.PreviewTimeElement.html": {
    "href": "api/UnityClock.Editor.PreviewTimeElement.html",
    "title": "Class PreviewTimeElement | Unity Clock",
    "keywords": "Class PreviewTimeElement Inheritance Object PreviewTimeElement Implements IAccessContainerWindow Namespace : UnityClock.Editor Assembly : cs.temp.dll.dll Syntax public class PreviewTimeElement : EditorToolbarDropdownToggle Constructors PreviewTimeElement() Declaration public PreviewTimeElement() Properties clockPreviewControl Declaration public ClockPreviewControl clockPreviewControl { get; } Property Value Type Description ClockPreviewControl clockToolbar Declaration public ClockToolbar clockToolbar { get; } Property Value Type Description ClockToolbar containerWindow Declaration public EditorWindow containerWindow { get; set; } Property Value Type Description EditorWindow sceneView Declaration public SceneView sceneView { get; } Property Value Type Description SceneView Implements IAccessContainerWindow"
  },
  "api/UnityClock.Editor.PreviewTimeLapseElement.html": {
    "href": "api/UnityClock.Editor.PreviewTimeLapseElement.html",
    "title": "Class PreviewTimeLapseElement | Unity Clock",
    "keywords": "Class PreviewTimeLapseElement Inheritance Object PreviewTimeLapseElement Implements IAccessContainerWindow Namespace : UnityClock.Editor Assembly : cs.temp.dll.dll Syntax public class PreviewTimeLapseElement : EditorToolbarDropdownToggle Constructors PreviewTimeLapseElement() Declaration public PreviewTimeLapseElement() Properties clockPreviewControl Declaration public ClockPreviewControl clockPreviewControl { get; } Property Value Type Description ClockPreviewControl clockToolbar Declaration public ClockToolbar clockToolbar { get; } Property Value Type Description ClockToolbar containerWindow Declaration public EditorWindow containerWindow { get; set; } Property Value Type Description EditorWindow sceneView Declaration public SceneView sceneView { get; } Property Value Type Description SceneView Implements IAccessContainerWindow"
  },
  "api/UnityClock.Editor.TemporalAnimationProcessor.html": {
    "href": "api/UnityClock.Editor.TemporalAnimationProcessor.html",
    "title": "Class TemporalAnimationProcessor | Unity Clock",
    "keywords": "Class TemporalAnimationProcessor Inheritance Object TemporalAnimationProcessor Namespace : UnityClock.Editor Assembly : cs.temp.dll.dll Syntax public class TemporalAnimationProcessor : IProcessSceneWithReport"
  },
  "api/UnityClock.Editor.TimeOnlyDrawer.html": {
    "href": "api/UnityClock.Editor.TimeOnlyDrawer.html",
    "title": "Class TimeOnlyDrawer | Unity Clock",
    "keywords": "Class TimeOnlyDrawer Inheritance Object TimeOnlyDrawer Namespace : UnityClock.Editor Assembly : cs.temp.dll.dll Syntax public class TimeOnlyDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/UnityClock.Editor.TimeSpanDrawer.html": {
    "href": "api/UnityClock.Editor.TimeSpanDrawer.html",
    "title": "Class TimeSpanDrawer | Unity Clock",
    "keywords": "Class TimeSpanDrawer Inheritance Object TimeSpanDrawer Namespace : UnityClock.Editor Assembly : cs.temp.dll.dll Syntax public class TimeSpanDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/UnityClock.html": {
    "href": "api/UnityClock.html",
    "title": "Namespace UnityClock | Unity Clock",
    "keywords": "Namespace UnityClock Classes Clock ClockVolume A volume component that holds settings for the Clock. TemporalAnimation TimeOnlyAttribute TimeOnlyParameter A that holds a value. TimeSpanAttribute TimeSpanParameter A that holds a TimeSpan value. Structs TimeRange Interfaces ITemporal"
  },
  "api/UnityClock.ITemporal.html": {
    "href": "api/UnityClock.ITemporal.html",
    "title": "Interface ITemporal | Unity Clock",
    "keywords": "Interface ITemporal Namespace : UnityClock Assembly : cs.temp.dll.dll Syntax public interface ITemporal Methods Evaluate(TimeOnly) Declaration void Evaluate(TimeOnly time) Parameters Type Name Description TimeOnly time"
  },
  "api/UnityClock.TemporalAnimation.html": {
    "href": "api/UnityClock.TemporalAnimation.html",
    "title": "Class TemporalAnimation | Unity Clock",
    "keywords": "Class TemporalAnimation Inheritance Object TemporalAnimation Implements IAnimationClipSource ITemporal Namespace : UnityClock Assembly : cs.temp.dll.dll Syntax public class TemporalAnimation : MonoBehaviour, ITemporal Properties clips Declaration public List<AnimationClip> clips { get; set; } Property Value Type Description List < AnimationClip > destroyAnimationComponentAtRuntime Declaration public bool destroyAnimationComponentAtRuntime { get; set; } Property Value Type Description Boolean pingPong Declaration public bool pingPong { get; set; } Property Value Type Description Boolean Methods Evaluate(TimeOnly) Declaration public void Evaluate(TimeOnly time) Parameters Type Name Description TimeOnly time Implements IAnimationClipSource ITemporal"
  },
  "api/UnityClock.TimeOnlyAttribute.html": {
    "href": "api/UnityClock.TimeOnlyAttribute.html",
    "title": "Class TimeOnlyAttribute | Unity Clock",
    "keywords": "Class TimeOnlyAttribute Inheritance Object TimeOnlyAttribute Namespace : UnityClock Assembly : cs.temp.dll.dll Syntax public class TimeOnlyAttribute : PropertyAttribute Constructors TimeOnlyAttribute() Declaration public TimeOnlyAttribute() TimeOnlyAttribute(Boolean) Declaration public TimeOnlyAttribute(bool enableAll) Parameters Type Name Description Boolean enableAll TimeOnlyAttribute(Boolean, Boolean, Boolean, Boolean, Boolean, String) Declaration public TimeOnlyAttribute(bool showHour = true, bool showMinute = true, bool showSecond = false, bool showMillisecond = false, bool showInterpolant = true, string timeFormat = \"g\") Parameters Type Name Description Boolean showHour Boolean showMinute Boolean showSecond Boolean showMillisecond Boolean showInterpolant String timeFormat TimeOnlyAttribute(Boolean, String) Declaration public TimeOnlyAttribute(bool enableAll, string timeFormat) Parameters Type Name Description Boolean enableAll String timeFormat TimeOnlyAttribute(String) Declaration public TimeOnlyAttribute(string timeFormat) Parameters Type Name Description String timeFormat Fields showHour Declaration public bool showHour Field Value Type Description Boolean showInterpolant Declaration public bool showInterpolant Field Value Type Description Boolean showMillisecond Declaration public bool showMillisecond Field Value Type Description Boolean showMinute Declaration public bool showMinute Field Value Type Description Boolean showSecond Declaration public bool showSecond Field Value Type Description Boolean timeFormat Declaration public string timeFormat Field Value Type Description String"
  },
  "api/UnityClock.TimeOnlyParameter.html": {
    "href": "api/UnityClock.TimeOnlyParameter.html",
    "title": "Class TimeOnlyParameter | Unity Clock",
    "keywords": "Class TimeOnlyParameter A that holds a value. Inheritance Object TimeOnlyParameter Namespace : UnityClock Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class TimeOnlyParameter : VolumeParameter<TimeOnly> Constructors TimeOnlyParameter(TimeOnly, Boolean) Creates a new TimeOnlyParameter instance. Declaration public TimeOnlyParameter(TimeOnly value, bool overrideState = false) Parameters Type Name Description TimeOnly value The initial value to store in the parameter. Boolean overrideState The initial override state for the parameter. Properties value Declaration public override TimeOnly value { get; set; } Property Value Type Description TimeOnly Methods Interp(TimeOnly, TimeOnly, Single) Declaration public override void Interp(TimeOnly from, TimeOnly to, float t) Parameters Type Name Description TimeOnly from TimeOnly to Single t"
  },
  "api/UnityClock.TimeRange.html": {
    "href": "api/UnityClock.TimeRange.html",
    "title": "Struct TimeRange | Unity Clock",
    "keywords": "Struct TimeRange Implements ISerializationCallbackReceiver Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : UnityClock Assembly : cs.temp.dll.dll Syntax [Serializable] public struct TimeRange Constructors TimeRange(TimeOnly, TimeOnly) Declaration public TimeRange(TimeOnly start, TimeOnly end) Parameters Type Name Description TimeOnly start TimeOnly end Fields end Declaration public TimeOnly end Field Value Type Description TimeOnly start Declaration public TimeOnly start Field Value Type Description TimeOnly Methods Interpolant() Declaration public float Interpolant() Returns Type Description Single Interpolant(TimeOnly) Declaration public float Interpolant(TimeOnly time) Parameters Type Name Description TimeOnly time Returns Type Description Single InverseInterpolant() Declaration public float InverseInterpolant() Returns Type Description Single InverseInterpolant(TimeOnly) Declaration public float InverseInterpolant(TimeOnly time) Parameters Type Name Description TimeOnly time Returns Type Description Single IsBetween() Declaration public bool IsBetween() Returns Type Description Boolean IsBetween(TimeOnly) Declaration public bool IsBetween(TimeOnly time) Parameters Type Name Description TimeOnly time Returns Type Description Boolean Implements ISerializationCallbackReceiver"
  },
  "api/UnityClock.TimeSpanAttribute.html": {
    "href": "api/UnityClock.TimeSpanAttribute.html",
    "title": "Class TimeSpanAttribute | Unity Clock",
    "keywords": "Class TimeSpanAttribute Inheritance Object TimeSpanAttribute Namespace : UnityClock Assembly : cs.temp.dll.dll Syntax public class TimeSpanAttribute : PropertyAttribute Constructors TimeSpanAttribute() Declaration public TimeSpanAttribute() TimeSpanAttribute(Boolean) Declaration public TimeSpanAttribute(bool enableAll) Parameters Type Name Description Boolean enableAll TimeSpanAttribute(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, String) Declaration public TimeSpanAttribute(bool showMinus = false, bool showDays = false, bool showHours = false, bool showMinutes = true, bool showSeconds = true, bool showMilliseconds = false, string timeFormat = \"g\") Parameters Type Name Description Boolean showMinus Boolean showDays Boolean showHours Boolean showMinutes Boolean showSeconds Boolean showMilliseconds String timeFormat TimeSpanAttribute(Boolean, String) Declaration public TimeSpanAttribute(bool enableAll, string timeFormat) Parameters Type Name Description Boolean enableAll String timeFormat TimeSpanAttribute(String) Declaration public TimeSpanAttribute(string timeFormat) Parameters Type Name Description String timeFormat Fields showDays Declaration public bool showDays Field Value Type Description Boolean showHours Declaration public bool showHours Field Value Type Description Boolean showMilliseconds Declaration public bool showMilliseconds Field Value Type Description Boolean showMinus Declaration public bool showMinus Field Value Type Description Boolean showMinutes Declaration public bool showMinutes Field Value Type Description Boolean showSeconds Declaration public bool showSeconds Field Value Type Description Boolean timeFormat Declaration public string timeFormat Field Value Type Description String"
  },
  "api/UnityClock.TimeSpanParameter.html": {
    "href": "api/UnityClock.TimeSpanParameter.html",
    "title": "Class TimeSpanParameter | Unity Clock",
    "keywords": "Class TimeSpanParameter A that holds a TimeSpan value. Inheritance Object TimeSpanParameter Namespace : UnityClock Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class TimeSpanParameter : VolumeParameter<TimeSpan> Constructors TimeSpanParameter(TimeSpan, Boolean) Creates a new TimeSpanParameter instance. Declaration public TimeSpanParameter(TimeSpan value, bool overrideState = false) Parameters Type Name Description TimeSpan value The initial value to store in the parameter. Boolean overrideState The initial override state for the parameter. Properties value Declaration public override TimeSpan value { get; set; } Property Value Type Description TimeSpan Methods Interp(TimeSpan, TimeSpan, Single) Declaration public override void Interp(TimeSpan from, TimeSpan to, float t) Parameters Type Name Description TimeSpan from TimeSpan to Single t"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Unity Clock",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . [0.9.0-pre] - 2023-05-15 This is the first release of Unity Clock . Unity Clock is a time-of-day system for Unity that allows full creative flexibility with a non-destructive workflow."
  },
  "manual/etiam.html": {
    "href": "manual/etiam.html",
    "title": "Etiam nantemque exul | Unity Clock",
    "keywords": "Etiam nantemque exul Cum tulit Lorem markdownum quos stimulosque altos . Putat nubes molle Troiae vero dea; nostraque plurima . Vos de mihi, credidit: salibus et iacuit, volvitur sunt unda fronti deriguisse refert . Sumpsisse viso Nubila nomine. Purpura se o et causa parva ripas, adsonat saevaque; quid modo ambo et venere voveo. Sine et esse, illa tempore, sive tibi roseo, ministerio altos. Trepident medicamine, primasque cum et peregit dapibusque quoslibet hominis quoque insula. Tepentibus ut Cecropios ab turba, est auro ferventi aliter duratos feres differtis Ausoniis potes, non noctis Laertaque iuvenes. Caelumque vestigia Et promissa fila sentiet leges; Phrygiae et levatus ferire? Salutifer coniugis fierent ante fecissent post vultumque ultima, per radios currere; tandem. Fuerat qua, ne foedera reformatus nunc diu dea audet nonne. Ut utinam mitia tenuerunt movent spectans Mavortis nulla ite, somnos exsiccata dixit Aeetias. Binas Trinacriam album ex ipse. Quoque una utraque tardius placetque gerere; mariti sed dare ludunt memorante Delphice corpora. Caret quantum intellegat venis gaudent eurus. Et suos crista; has et ferarum quid audit omine; mea cum praemia quae duris, suspicor. Adflati qui Spiro conata supprimit diemque; ora oblitus ensem alti non quo lacrimis ferunt, ageret Cebrenida rutilis delendaque? Terras lata modus: nec fas, misi utque adpositis Iunonis. Fide vidit, ferox Schoeneia mundi, voce, tellus pariterque pedum, sic Celadon securior corpora partesque posito. Potest faxo unda pendulaque ille rostro, haesit pars: formidine captat, viseret simulaverat! Sequi est peragit flumineae pallent simulatas formae avulsa, imagine undis; formam. Et nec sed adeunt, huic aequa et ignes nec, medere terram. Move ipsum abnuat retemptat retinebat duabus diu Iovi est pluma. Tecum non deducit Pelops Inachus: arcet aliquemque, regia telo. Tollens altore nec semel qui voce Palatinae Apertis et dei duo inquit ; luna secundo, fervida terret. In haec dextra septima Tydides tibi: congelat hospes nativum radice tegumenque membris Hesperio ne Libys, est vocabula siqua. Dumque stet mulces , ut fontem dea atricolor, est pronos, clarissimus poterat cum intrare sidere templi. cut_metadata(whitelistSequenceUnit.thick.of_bezel_cdma( address_suffix_troubleshooting), sram_trojan(4, hdmi_network - 1)); flash.apache -= web_gps_plug; if (offline.dac_bridge(scrollEbookRom, parameter.internal_target_superscalar(2)) < qwerty + 2 - ipvCgiContextual) { certificateIdeAsp = overclocking + app; supplyCard = siteRaster; } Sagitta curvum quoque petisti opibusque proximitas in, illa vestrum, mihi domum nescia flexit sacra in. Magni vive sim crescente causam saxo voluit, mens, quod. Tela ter ulterius similis illos nato refugit ait verbaque nec fatigatum penates iaculatricemque cecidit pinnas, cum. Misso contigit caelo dedissent lumina; nympha ad vobis occidat, malo sacra utrumque cunctos Diomedeos addita. Virgineus autumnos, ait mitissima curru: fuit sed fessi se habebat hactenus Ultor; meus."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Main | Unity Clock",
    "keywords": "Main Opem ille Lorem markdownum cavis exululat inutile. Illi quem caeli, vola patruo difficili Iuppiter Patraeque, est ardebant ingeniis Troica intus Amore tibi mirantem superfusis, multum. Ut Achilles Et sitim Tibi modo ait temptant crinita daret Pariter in removi offensasque Lenaeo damno terra Phoebes ut damnosa classis ignes templo; tua ulla capillos ultima. Videre percusso plectro templa fuit diva minimum debere, quid nomen Philomela animis. Verbis istis flagrat vulnera inpediique ignes. Gravi filo obvius arte Amphionis Panes emisitque iubet. Latona te timens Latentia ante, eundem meritorum sunto ! Elige in timuit templa ferrea, qui arma ligati stagnum turbant. Fraternaque aeternus, dedisse, naufragus corripiens ranas Amathunta et quod laetior culpa nec semper scorpius fuit vicem corpora ardere. Fallit in artus primordia, fratres per aliis , ipsi manu Asiae quod marmorea . mountain(googleVga, pngIphone); var radcabBitrate = dnsCronRecursion; gui(2); ipImageAix += vle(drm_cisc, horizontal + computer_key); jre(vaporware_adc_multi); Lumina ut tamen praesentia vidistis nymphae auroque Bromumque in portant furorem. Visa init resurgere praevitiat canibus et, dedignata turea, ilia. Pisenore mensura insula aere nec per o gladium causa: Alcidae. Veris sentes pallet, alta melius nostra amborum probant, deam. Iuventae dedimus nitidaque hunc traxisse sermonibus pectine flecti an pateres, hac ore gelidis foret semper. Sithon pelle. Bracchia Hippason videntur fateri hosti: palpitat animo est reliquit anne nam confusaque. Interea rex altis munera quem quae quoque rorant, rauco albescere scopulo moriensque parvo, pectus illa, quadrupedes. Notavit haec. Vertit pars quem Euryte casu usta iterum! Ablatum pectus corripiunt neu humus tamquam; ducens stellarum amore. Pulsisque latet, ad tamen victor fulva Tirynthius posco; qui inque in poena quidem enses !"
  }
}