name: docfx-unitypackage

on:
  push:
    branches:
      - main

jobs:
  # Build the documentation
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # with:
        #   submodules: true

      # This step needs to happen before anything else!
      - name: Move everything inside the manual/ folder.
        run: |
          mv /Documentation~ /manual
          mkdir -p Documentation~/manual
          mv manual Documentation~/manual

      - name: Generate index page
        run: echo 'This page redirects to the [manual](manual/).' > Documentation~/index.md

      - name: Generate main Table of Contents
        run: |
          echo '# [Manual](manual/)' > Documentation~/toc.md
          echo '# [Scripting API](api/)' >> Documentation~/toc.md
          echo '# [Changelog](changelog/)' >> Documentation~/toc.md
          echo '# [License](license/)' >> Documentation~/toc.md

      - name: Generate manual Table of Contents
        run: |
          mv Documentation~/manual/TableOfContents.md Documentation~/manual/toc.md
          sed -i -e 's/*/#/g' Documentation~/manual/toc.md
          sed -i -e 's/     /#/g' Documentation~/manual/toc.md

      - name: Generate api index
        run: |
          mkdir -p Documentation~/api
          if [ -f Documentation~/api_index.md ]; then
            cp Documentation~/api_index.md Documentation~/api/index.md
            rm Documentation~/api_index.md
          else
            echo 'This is the documentation for the Scripting APIs of this package.' > Documentation~/api/index.md
          fi

      - name: Generate changelog page
        run: |
          mkdir -p Documentation~/changelog
          cp CHANGELOG.md Documentation~/changelog/CHANGELOG.md
          echo '# [Changes](CHANGELOG.md)' > Documentation~/changelog/toc.md

      - name: Generate license page
        run: |
          mkdir -p Documentation~/license
          cp LICENSE.md Documentation~/license/LICENSE.md
          echo '# [License](LICENSE.md)' > Documentation~/license/toc.md
          if [ -f 'Third Party Notices.md' ]; then
            cp 'Third Party Notices.md' 'Documentation~/license/Third Party Notices.md'
            sed -i '1i# [Third Party Notices](Third Party Notices.md)' Documentation~/license/toc.md
          fi

      - name: Generate docfx.json
        run: |
          echo '{
              "metadata": [{
                  "src": [{"src": "..", "files": ["**/*.cs"]}],
                  "globalNamespaceId": "Global",
                  "dest": "api",
                  "allowCompilationErrors": true
              }],
              "build": {
                  "globalMetadata": {
                      "_appTitle": "Unity Clock",
                      "_appFooter": "<span>Made by <a href=\"https://github.com/CaseyHofland\" target=\"_blank\">Casey Hofland</a> using <a href=\"https://dotnet.github.io/docfx\" target=\"_blank\">DocFX</a></span>",
                      "_enableSearch": true,
                      "_disableContribution": true
                  },
                  "fileMetadata": {"_disableContribution": {"manual/**/*.md": false}},
                  "content": [
                      {"files": ["index.md", "toc.md"]},
                      {"src": "license", "files": ["*.md"], "dest": "license"},
                      {"src": "changelog", "files": ["*.md"], "dest": "changelog"},
                      {"src": "api", "files": ["*.yml", "index.md"], "dest": "api"},
                      {"src": "manual", "files": ["*.md"], "dest": "manual"}
                  ],
                  "overwrite": ["manual/config.json", "manual/projectMetadata.json"],
                  "resource": [{"files": ["manual/images/*"]}],
                  "template": ["default", "modern"],
                  "sitemap": {"baseUrl": "https://caseyhofland.github.io/com.casey.unityclock/"},
                  "xref": ["https://caseyhofland.github.io/com.casey.unityclock/"],
                  "xrefService": ["https://xref.docs.microsoft.com/query?uid={uid}"],
                  "dest": "../_site"
              }
          }' > Documentation~/docfx.json
          if [ -f 'manual/filter.yml' ]; then
            sed -i '5i\        "filter": "manual/filter.yml",' Documentation~/docfx.json
          fi

      - name: Dotnet Setup
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      
      - run: dotnet tool update -g docfx

      - name: Build
        run: docfx Documentation~/docfx.json

      # Generate a redirect to the manual/ page, taking protocol and custom domain names into account.
      - name: Generate redirect
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          url=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')
          sed -i '19i\      <meta http-equiv="refresh" content="0;URL='"$url"manual/'">' _site/index.html

      # Upload the generated documentation
      - name: Upload site artifact
        uses: actions/upload-artifact@v1
        with:
          name: _site
          path: _site # Must equals the 'build.dest' value on your docfx.json

  # Deploy the generated documentation to the gh-pages branch
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # with:
        #   submodules: true

      # Download the generated documentation
      - name: Download site artifact
        uses: actions/download-artifact@v1
        with:
          name: _site

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: _site