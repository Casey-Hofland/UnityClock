{
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Unity Clock",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "api/System.html": {
    "href": "api/System.html",
    "title": "Namespace System | Unity Clock",
    "keywords": "Namespace System Structs TimeOnly Represents a time of day, as would be read from a clock, within the range 00:00:00 to 23:59:59.9999999."
  },
  "api/System.TimeOnly.html": {
    "href": "api/System.TimeOnly.html",
    "title": "Struct TimeOnly | Unity Clock",
    "keywords": "Struct TimeOnly Namespace System Represents a time of day, as would be read from a clock, within the range 00:00:00 to 23:59:59.9999999. public readonly struct TimeOnly : IComparable, IComparable<TimeOnly>, IEquatable<TimeOnly> Implements IComparable IComparable<TimeOnly> IEquatable<TimeOnly> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TimeOnly(int, int) Initializes a new instance of the timeOnly structure to the specified hour and the minute. public TimeOnly(int hour, int minute) Parameters hour int The hours (0 through 23). minute int The minutes (0 through 59). TimeOnly(int, int, int) Initializes a new instance of the timeOnly structure to the specified hour, minute, and second. public TimeOnly(int hour, int minute, int second) Parameters hour int The hours (0 through 23). minute int The minutes (0 through 59). second int The seconds (0 through 59). TimeOnly(int, int, int, int) Initializes a new instance of the timeOnly structure to the specified hour, minute, second, and millisecond. public TimeOnly(int hour, int minute, int second, int millisecond) Parameters hour int The hours (0 through 23). minute int The minutes (0 through 59). second int The seconds (0 through 59). millisecond int The millisecond (0 through 999). TimeOnly(long) Initializes a new instance of the TimeOnly structure using a specified number of ticks. public TimeOnly(long ticks) Parameters ticks long A time of day expressed in the number of 100-nanosecond units since 00:00:00.0000000. Properties Hour Gets the hour component of the time represented by this instance. public int Hour { get; } Property Value int MaxValue Represents the largest possible value of TimeOnly. public static TimeOnly MaxValue { get; } Property Value TimeOnly Millisecond Gets the millisecond component of the time represented by this instance. public int Millisecond { get; } Property Value int MinValue Represents the smallest possible value of TimeOnly. public static TimeOnly MinValue { get; } Property Value TimeOnly Minute Gets the minute component of the time represented by this instance. public int Minute { get; } Property Value int Second Gets the second component of the time represented by this instance. public int Second { get; } Property Value int Ticks Gets the number of ticks that represent the time of this instance. public long Ticks { get; } Property Value long Methods Add(TimeSpan) Returns a new TimeOnly that adds the value of the specified TimeSpan to the value of this instance. public TimeOnly Add(TimeSpan value) Parameters value TimeSpan A positive or negative time interval. Returns TimeOnly An object whose value is the sum of the time represented by this instance and the time interval represented by value. Add(TimeSpan, out int) Returns a new TimeOnly that adds the value of the specified TimeSpan to the value of this instance. If the result wraps past the end of the day, this method will return the number of excess days as an out parameter. public TimeOnly Add(TimeSpan value, out int wrappedDays) Parameters value TimeSpan A positive or negative time interval. wrappedDays int When this method returns, contains the number of excess days if any that resulted from wrapping during this addition operation. Returns TimeOnly An object whose value is the sum of the time represented by this instance and the time interval represented by value. AddHours(double) Returns a new TimeOnly that adds the specified number of hours to the value of this instance. public TimeOnly AddHours(double value) Parameters value double A number of whole and fractional hours. The value parameter can be negative or positive. Returns TimeOnly An object whose value is the sum of the time represented by this instance and the number of hours represented by value. AddHours(double, out int) Returns a new TimeOnly that adds the specified number of hours to the value of this instance. If the result wraps past the end of the day, this method will return the number of excess days as an out parameter. public TimeOnly AddHours(double value, out int wrappedDays) Parameters value double A number of whole and fractional hours. The value parameter can be negative or positive. wrappedDays int When this method returns, contains the number of excess days if any that resulted from wrapping during this addition operation. Returns TimeOnly An object whose value is the sum of the time represented by this instance and the number of hours represented by value. AddMinutes(double) Returns a new TimeOnly that adds the specified number of minutes to the value of this instance. public TimeOnly AddMinutes(double value) Parameters value double A number of whole and fractional minutes. The value parameter can be negative or positive. Returns TimeOnly An object whose value is the sum of the time represented by this instance and the number of minutes represented by value. AddMinutes(double, out int) Returns a new TimeOnly that adds the specified number of minutes to the value of this instance. If the result wraps past the end of the day, this method will return the number of excess days as an out parameter. public TimeOnly AddMinutes(double value, out int wrappedDays) Parameters value double A number of whole and fractional minutes. The value parameter can be negative or positive. wrappedDays int When this method returns, contains the number of excess days if any that resulted from wrapping during this addition operation. Returns TimeOnly An object whose value is the sum of the time represented by this instance and the number of minutes represented by value. CompareTo(object?) Compares the value of this instance to a specified object that contains a specified TimeOnly value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified TimeOnly value. public int CompareTo(object? value) Parameters value object A boxed object to compare, or null. Returns int A signed number indicating the relative values of this instance and the value parameter. Less than zero if this instance is earlier than value. Zero if this instance is the same as value. Greater than zero if this instance is later than value. CompareTo(TimeOnly) Compares the value of this instance to a specified TimeOnly value and indicates whether this instance is earlier than, the same as, or later than the specified TimeOnly value. public int CompareTo(TimeOnly value) Parameters value TimeOnly The object to compare to the current instance. Returns int A signed number indicating the relative values of this instance and the value parameter. Less than zero if this instance is earlier than value. Zero if this instance is the same as value. Greater than zero if this instance is later than value. Equals(object?) Returns a value indicating whether this instance is equal to a specified object. public override bool Equals(object? value) Parameters value object The object to compare to this instance. Returns bool true if value is an instance of TimeOnly and equals the value of this instance; otherwise, false. Equals(TimeOnly) Returns a value indicating whether the value of this instance is equal to the value of the specified TimeOnly instance. public bool Equals(TimeOnly value) Parameters value TimeOnly The object to compare to this instance. Returns bool true if the value parameter equals the value of this instance; otherwise, false. FromDateTime(DateTime) Constructs a TimeOnly object from a DateTime representing the time of the day in this DateTime object. public static TimeOnly FromDateTime(DateTime dateTime) Parameters dateTime DateTime The time DateTime object to extract the time of the day from. Returns TimeOnly A TimeOnly object representing time of the day specified in the DateTime object. FromTimeSpan(TimeSpan) Constructs a TimeOnly object from a TimeSpan representing the time elapsed since midnight. public static TimeOnly FromTimeSpan(TimeSpan timeSpan) Parameters timeSpan TimeSpan The time interval measured since midnight. This value has to be positive and not exceeding the time of the day. Returns TimeOnly A TimeOnly object representing the time elapsed since midnight using the timeSpan value. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer hash code. IsBetween(TimeOnly, TimeOnly) Determines if a time falls within the range provided. Supports both \"normal\" ranges such as 10:00-12:00, and ranges that span midnight such as 23:00-01:00. public bool IsBetween(TimeOnly start, TimeOnly end) Parameters start TimeOnly The starting time of day, inclusive. end TimeOnly The ending time of day, exclusive. Returns bool True, if the time falls within the range, false otherwise. Remarks If start and end are equal, this method returns false, meaning there is zero elapsed time between the two values. If you wish to treat such cases as representing one or more whole days, then first check for equality before calling this method. ToLongTimeString() Converts the value of the current TimeOnly object to its equivalent long date string representation. public string ToLongTimeString() Returns string A string that contains the long time string representation of the current TimeOnly object. ToShortTimeString() Converts the value of the current TimeOnly object to its equivalent short time string representation. public string ToShortTimeString() Returns string A string that contains the short time string representation of the current TimeOnly object. ToString() Converts the value of the current TimeOnly object to its equivalent string representation using the formatting conventions of the current culture. The TimeOnly object will be formatted in short form. public override string ToString() Returns string A string that contains the short time string representation of the current TimeOnly object. ToString(IFormatProvider?) Converts the value of the current TimeOnly object to its equivalent string representation using the specified culture-specific format information. public string ToString(IFormatProvider? provider) Parameters provider IFormatProvider An object that supplies culture-specific formatting information. Returns string A string representation of value of the current TimeOnly object as specified by provider. ToString(string?) Converts the value of the current TimeOnly object to its equivalent string representation using the specified format and the formatting conventions of the current culture. public string ToString(string? format) Parameters format string A standard or custom time format string. Returns string A string representation of value of the current TimeOnly object as specified by format. Remarks The accepted standard formats are 'r', 'R', 'o', 'O', 't' and 'T'. ToString(string?, IFormatProvider?) Converts the value of the current TimeOnly object to its equivalent string representation using the specified culture-specific format information. public string ToString(string? format, IFormatProvider? provider) Parameters format string A standard or custom time format string. provider IFormatProvider An object that supplies culture-specific formatting information. Returns string A string representation of value of the current TimeOnly object as specified by format and provider. Remarks The accepted standard formats are 'r', 'R', 'o', 'O', 't' and 'T'. ToTimeSpan() Convert the current TimeOnly instance to a TimeSpan object. public TimeSpan ToTimeSpan() Returns TimeSpan A TimeSpan object spanning to the time specified in the current TimeOnly object. Operators operator ==(TimeOnly, TimeOnly) Determines whether two specified instances of TimeOnly are equal. public static bool operator ==(TimeOnly left, TimeOnly right) Parameters left TimeOnly The first object to compare. right TimeOnly The second object to compare. Returns bool true if left and right represent the same time; otherwise, false. operator >(TimeOnly, TimeOnly) Determines whether one specified TimeOnly is later than another specified TimeOnly. public static bool operator >(TimeOnly left, TimeOnly right) Parameters left TimeOnly The first object to compare. right TimeOnly The second object to compare. Returns bool true if left is later than right; otherwise, false. operator >=(TimeOnly, TimeOnly) Determines whether one specified TimeOnly represents a time that is the same as or later than another specified TimeOnly. public static bool operator >=(TimeOnly left, TimeOnly right) Parameters left TimeOnly The first object to compare. right TimeOnly The second object to compare. Returns bool true if left is the same as or later than right; otherwise, false. operator !=(TimeOnly, TimeOnly) Determines whether two specified instances of TimeOnly are not equal. public static bool operator !=(TimeOnly left, TimeOnly right) Parameters left TimeOnly The first object to compare. right TimeOnly The second object to compare. Returns bool true if left and right do not represent the same time; otherwise, false. operator <(TimeOnly, TimeOnly) Determines whether one specified TimeOnly is earlier than another specified TimeOnly. public static bool operator <(TimeOnly left, TimeOnly right) Parameters left TimeOnly The first object to compare. right TimeOnly The second object to compare. Returns bool true if left is earlier than right; otherwise, false. operator <=(TimeOnly, TimeOnly) Determines whether one specified TimeOnly represents a time that is the same as or earlier than another specified TimeOnly. public static bool operator <=(TimeOnly left, TimeOnly right) Parameters left TimeOnly The first object to compare. right TimeOnly The second object to compare. Returns bool true if left is the same as or earlier than right; otherwise, false. operator -(TimeOnly, TimeOnly) Gives the elapsed time between two points on a circular clock, which will always be a positive value. public static TimeSpan operator -(TimeOnly t1, TimeOnly t2) Parameters t1 TimeOnly The first TimeOnly instance. t2 TimeOnly The second TimeOnly instance.. Returns TimeSpan The elapsed time between t1 and t2."
  },
  "api/UnityClock.Clock.html": {
    "href": "api/UnityClock.Clock.html",
    "title": "Class Clock | Unity Clock",
    "keywords": "Class Clock Namespace UnityClock public class Clock Inheritance object Clock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields dayMultiplier public const float dayMultiplier = 1.1574074E-12 Field Value float Properties time The current time on the clock. public static TimeOnly time { get; set; } Property Value TimeOnly Methods ElapsedTime(TimeSpan) The elapsed time for a day span since the start of the game. public static TimeSpan ElapsedTime(TimeSpan daySpan) Parameters daySpan TimeSpan The time it takes for the clock to progress 24 hours. Returns TimeSpan InverseLerp(TimeOnly, TimeOnly) Determines where time falls between start and end. public static float InverseLerp(TimeOnly start, TimeOnly end) Parameters start TimeOnly end TimeOnly Returns float A value between 0 and 1, representing where time falls between start and end. InverseLerp(TimeOnly, TimeOnly, TimeOnly) Determines where time falls between start and end. public static float InverseLerp(TimeOnly start, TimeOnly end, TimeOnly time) Parameters start TimeOnly end TimeOnly time TimeOnly Returns float A value between 0 and 1, representing where time falls between start and end. InverseLerp(TimeSpan, TimeSpan, TimeSpan) public static float InverseLerp(TimeSpan start, TimeSpan end, TimeSpan span) Parameters start TimeSpan end TimeSpan span TimeSpan Returns float Lerp(TimeOnly, TimeOnly, float) public static TimeOnly Lerp(TimeOnly start, TimeOnly end, float t) Parameters start TimeOnly end TimeOnly t float Returns TimeOnly Lerp(TimeSpan, TimeSpan, float) public static TimeSpan Lerp(TimeSpan start, TimeSpan end, float t) Parameters start TimeSpan end TimeSpan t float Returns TimeSpan LerpUnclamped(TimeOnly, TimeOnly, float) public static TimeOnly LerpUnclamped(TimeOnly start, TimeOnly end, float t) Parameters start TimeOnly end TimeOnly t float Returns TimeOnly LerpUnclamped(TimeSpan, TimeSpan, float) public static TimeSpan LerpUnclamped(TimeSpan start, TimeSpan end, float t) Parameters start TimeSpan end TimeSpan t float Returns TimeSpan PingPong(TimeOnly) Returns a value between 1 and 0 where 1 is midday and 0 is midnight. public static float PingPong(TimeOnly time) Parameters time TimeOnly Returns float Events timeChanged Invoked whenever the time changes. [Obsolete] public static event Action<TimeOnly>? timeChanged Event Type Action<TimeOnly>"
  },
  "api/UnityClock.ClockVolume.html": {
    "href": "api/UnityClock.ClockVolume.html",
    "title": "Class ClockVolume | Unity Clock",
    "keywords": "Class ClockVolume Namespace UnityClock A volume component that holds settings for the Clock. [Serializable] public sealed class ClockVolume : VolumeComponent Inheritance object ClockVolume Fields daySpan public TimeSpanParameter daySpan Field Value TimeSpanParameter time public TimeOnlyParameter time Field Value TimeOnlyParameter Methods OnEnable() protected override void OnEnable() Override(VolumeComponent, float) public override void Override(VolumeComponent state, float interpFactor) Parameters state VolumeComponent interpFactor float"
  },
  "api/UnityClock.Editor.ClockPreviewControl.html": {
    "href": "api/UnityClock.Editor.ClockPreviewControl.html",
    "title": "Class ClockPreviewControl | Unity Clock",
    "keywords": "Class ClockPreviewControl Namespace UnityClock.Editor [Serializable] public class ClockPreviewControl Inheritance object ClockPreviewControl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties canPreview public bool canPreview { get; } Property Value bool previewing public bool previewing { get; set; } Property Value bool time public TimeOnly time { get; set; } Property Value TimeOnly Methods OnCreate() public void OnCreate() OnDestroy() public void OnDestroy() StartPreview() public void StartPreview() StopPreview() public void StopPreview()"
  },
  "api/UnityClock.Editor.ClockToolbar.html": {
    "href": "api/UnityClock.Editor.ClockToolbar.html",
    "title": "Class ClockToolbar | Unity Clock",
    "keywords": "Class ClockToolbar Namespace UnityClock.Editor public class ClockToolbar : ToolbarOverlay Inheritance object ClockToolbar Constructors ClockToolbar() public ClockToolbar() Fields clockPreviewControl public readonly ClockPreviewControl clockPreviewControl Field Value ClockPreviewControl Methods OnCreated() public override void OnCreated() OnWillBeDestroyed() public override void OnWillBeDestroyed()"
  },
  "api/UnityClock.Editor.html": {
    "href": "api/UnityClock.Editor.html",
    "title": "Namespace UnityClock.Editor | Unity Clock",
    "keywords": "Namespace UnityClock.Editor Classes ClockPreviewControl ClockToolbar PreviewTimeElement PreviewTimeLapseElement TemporalAnimationProcessor TimeOnlyDrawer TimeSpanDrawer"
  },
  "api/UnityClock.Editor.PreviewTimeElement.html": {
    "href": "api/UnityClock.Editor.PreviewTimeElement.html",
    "title": "Class PreviewTimeElement | Unity Clock",
    "keywords": "Class PreviewTimeElement Namespace UnityClock.Editor public class PreviewTimeElement : EditorToolbarDropdownToggle, IAccessContainerWindow Inheritance object PreviewTimeElement Implements IAccessContainerWindow Constructors PreviewTimeElement() public PreviewTimeElement() Properties clockPreviewControl public ClockPreviewControl clockPreviewControl { get; } Property Value ClockPreviewControl clockToolbar public ClockToolbar clockToolbar { get; } Property Value ClockToolbar containerWindow public EditorWindow containerWindow { get; set; } Property Value EditorWindow sceneView public SceneView sceneView { get; } Property Value SceneView"
  },
  "api/UnityClock.Editor.PreviewTimeLapseElement.html": {
    "href": "api/UnityClock.Editor.PreviewTimeLapseElement.html",
    "title": "Class PreviewTimeLapseElement | Unity Clock",
    "keywords": "Class PreviewTimeLapseElement Namespace UnityClock.Editor public class PreviewTimeLapseElement : EditorToolbarDropdownToggle, IAccessContainerWindow Inheritance object PreviewTimeLapseElement Implements IAccessContainerWindow Constructors PreviewTimeLapseElement() public PreviewTimeLapseElement() Properties clockPreviewControl public ClockPreviewControl clockPreviewControl { get; } Property Value ClockPreviewControl clockToolbar public ClockToolbar clockToolbar { get; } Property Value ClockToolbar containerWindow public EditorWindow containerWindow { get; set; } Property Value EditorWindow sceneView public SceneView sceneView { get; } Property Value SceneView"
  },
  "api/UnityClock.Editor.TemporalAnimationProcessor.html": {
    "href": "api/UnityClock.Editor.TemporalAnimationProcessor.html",
    "title": "Class TemporalAnimationProcessor | Unity Clock",
    "keywords": "Class TemporalAnimationProcessor Namespace UnityClock.Editor public class TemporalAnimationProcessor : IProcessSceneWithReport Inheritance object TemporalAnimationProcessor"
  },
  "api/UnityClock.Editor.TimeOnlyDrawer.html": {
    "href": "api/UnityClock.Editor.TimeOnlyDrawer.html",
    "title": "Class TimeOnlyDrawer | Unity Clock",
    "keywords": "Class TimeOnlyDrawer Namespace UnityClock.Editor public class TimeOnlyDrawer : PropertyDrawer Inheritance object TimeOnlyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters property SerializedProperty label GUIContent Returns float OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters position Rect property SerializedProperty label GUIContent"
  },
  "api/UnityClock.Editor.TimeSpanDrawer.html": {
    "href": "api/UnityClock.Editor.TimeSpanDrawer.html",
    "title": "Class TimeSpanDrawer | Unity Clock",
    "keywords": "Class TimeSpanDrawer Namespace UnityClock.Editor public class TimeSpanDrawer : PropertyDrawer Inheritance object TimeSpanDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters property SerializedProperty label GUIContent Returns float OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters position Rect property SerializedProperty label GUIContent"
  },
  "api/UnityClock.html": {
    "href": "api/UnityClock.html",
    "title": "Namespace UnityClock | Unity Clock",
    "keywords": "Namespace UnityClock Classes Clock ClockVolume A volume component that holds settings for the Clock. TemporalAnimation TimeOnlyAttribute TimeOnlyParameter A that holds a value. TimeSpanAttribute TimeSpanParameter A that holds a TimeSpan value. Structs TimeRange Interfaces ITemporal"
  },
  "api/UnityClock.ITemporal.html": {
    "href": "api/UnityClock.ITemporal.html",
    "title": "Interface ITemporal | Unity Clock",
    "keywords": "Interface ITemporal Namespace UnityClock public interface ITemporal Methods Evaluate(TimeOnly) void Evaluate(TimeOnly time) Parameters time TimeOnly"
  },
  "api/UnityClock.TemporalAnimation.html": {
    "href": "api/UnityClock.TemporalAnimation.html",
    "title": "Class TemporalAnimation | Unity Clock",
    "keywords": "Class TemporalAnimation Namespace UnityClock public class TemporalAnimation : MonoBehaviour, IAnimationClipSource, ITemporal Inheritance object TemporalAnimation Implements IAnimationClipSource ITemporal Properties clips public List<AnimationClip> clips { get; set; } Property Value List<AnimationClip> destroyAnimationComponentAtRuntime public bool destroyAnimationComponentAtRuntime { get; set; } Property Value bool pingPong public bool pingPong { get; set; } Property Value bool Methods Evaluate(TimeOnly) public void Evaluate(TimeOnly time) Parameters time TimeOnly"
  },
  "api/UnityClock.TimeOnlyAttribute.html": {
    "href": "api/UnityClock.TimeOnlyAttribute.html",
    "title": "Class TimeOnlyAttribute | Unity Clock",
    "keywords": "Class TimeOnlyAttribute Namespace UnityClock public class TimeOnlyAttribute : PropertyAttribute Inheritance object TimeOnlyAttribute Constructors TimeOnlyAttribute() public TimeOnlyAttribute() TimeOnlyAttribute(bool) public TimeOnlyAttribute(bool enableAll) Parameters enableAll bool TimeOnlyAttribute(bool, bool, bool, bool, bool, string) public TimeOnlyAttribute(bool showHour = true, bool showMinute = true, bool showSecond = false, bool showMillisecond = false, bool showInterpolant = true, string timeFormat = \"g\") Parameters showHour bool showMinute bool showSecond bool showMillisecond bool showInterpolant bool timeFormat string TimeOnlyAttribute(bool, string) public TimeOnlyAttribute(bool enableAll, string timeFormat) Parameters enableAll bool timeFormat string TimeOnlyAttribute(string) public TimeOnlyAttribute(string timeFormat) Parameters timeFormat string Fields showHour public bool showHour Field Value bool showInterpolant public bool showInterpolant Field Value bool showMillisecond public bool showMillisecond Field Value bool showMinute public bool showMinute Field Value bool showSecond public bool showSecond Field Value bool timeFormat public string timeFormat Field Value string"
  },
  "api/UnityClock.TimeOnlyParameter.html": {
    "href": "api/UnityClock.TimeOnlyParameter.html",
    "title": "Class TimeOnlyParameter | Unity Clock",
    "keywords": "Class TimeOnlyParameter Namespace UnityClock A that holds a value. [Serializable] public sealed class TimeOnlyParameter : VolumeParameter<TimeOnly> Inheritance object TimeOnlyParameter Constructors TimeOnlyParameter(TimeOnly, bool) Creates a new TimeOnlyParameter instance. public TimeOnlyParameter(TimeOnly value, bool overrideState = false) Parameters value TimeOnly The initial value to store in the parameter. overrideState bool The initial override state for the parameter. Properties value public override TimeOnly value { get; set; } Property Value TimeOnly Methods Interp(TimeOnly, TimeOnly, float) public override void Interp(TimeOnly from, TimeOnly to, float t) Parameters from TimeOnly to TimeOnly t float"
  },
  "api/UnityClock.TimeRange.html": {
    "href": "api/UnityClock.TimeRange.html",
    "title": "Struct TimeRange | Unity Clock",
    "keywords": "Struct TimeRange Namespace UnityClock [Serializable] public struct TimeRange : ISerializationCallbackReceiver Implements ISerializationCallbackReceiver Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TimeRange(TimeOnly, TimeOnly) public TimeRange(TimeOnly start, TimeOnly end) Parameters start TimeOnly end TimeOnly Fields end public TimeOnly end Field Value TimeOnly start public TimeOnly start Field Value TimeOnly Methods Interpolant() public float Interpolant() Returns float Interpolant(TimeOnly) public float Interpolant(TimeOnly time) Parameters time TimeOnly Returns float InverseInterpolant() public float InverseInterpolant() Returns float InverseInterpolant(TimeOnly) public float InverseInterpolant(TimeOnly time) Parameters time TimeOnly Returns float IsBetween() public bool IsBetween() Returns bool IsBetween(TimeOnly) public bool IsBetween(TimeOnly time) Parameters time TimeOnly Returns bool"
  },
  "api/UnityClock.TimeSpanAttribute.html": {
    "href": "api/UnityClock.TimeSpanAttribute.html",
    "title": "Class TimeSpanAttribute | Unity Clock",
    "keywords": "Class TimeSpanAttribute Namespace UnityClock public class TimeSpanAttribute : PropertyAttribute Inheritance object TimeSpanAttribute Constructors TimeSpanAttribute() public TimeSpanAttribute() TimeSpanAttribute(bool) public TimeSpanAttribute(bool enableAll) Parameters enableAll bool TimeSpanAttribute(bool, bool, bool, bool, bool, bool, string) public TimeSpanAttribute(bool showMinus = false, bool showDays = false, bool showHours = false, bool showMinutes = true, bool showSeconds = true, bool showMilliseconds = false, string timeFormat = \"g\") Parameters showMinus bool showDays bool showHours bool showMinutes bool showSeconds bool showMilliseconds bool timeFormat string TimeSpanAttribute(bool, string) public TimeSpanAttribute(bool enableAll, string timeFormat) Parameters enableAll bool timeFormat string TimeSpanAttribute(string) public TimeSpanAttribute(string timeFormat) Parameters timeFormat string Fields showDays public bool showDays Field Value bool showHours public bool showHours Field Value bool showMilliseconds public bool showMilliseconds Field Value bool showMinus public bool showMinus Field Value bool showMinutes public bool showMinutes Field Value bool showSeconds public bool showSeconds Field Value bool timeFormat public string timeFormat Field Value string"
  },
  "api/UnityClock.TimeSpanParameter.html": {
    "href": "api/UnityClock.TimeSpanParameter.html",
    "title": "Class TimeSpanParameter | Unity Clock",
    "keywords": "Class TimeSpanParameter Namespace UnityClock A that holds a TimeSpan value. [Serializable] public sealed class TimeSpanParameter : VolumeParameter<TimeSpan> Inheritance object TimeSpanParameter Constructors TimeSpanParameter(TimeSpan, bool) Creates a new TimeSpanParameter instance. public TimeSpanParameter(TimeSpan value, bool overrideState = false) Parameters value TimeSpan The initial value to store in the parameter. overrideState bool The initial override state for the parameter. Properties value public override TimeSpan value { get; set; } Property Value TimeSpan Methods Interp(TimeSpan, TimeSpan, float) public override void Interp(TimeSpan from, TimeSpan to, float t) Parameters from TimeSpan to TimeSpan t float"
  },
  "index.html": {
    "href": "index.html",
    "title": "| Unity Clock",
    "keywords": "This page redirects to the manual."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "About Unity Clock | Unity Clock",
    "keywords": "About Unity Clock Unity Clock is a time-of-day system that allows full creative flexibility with a non-destructive workflow. The core philosophy is centered around the utilization of Animation Clips. Animation Clips allow full creative flexibility in how an object should change over time, and they can be previewed in the editor without triggering scene changes, which makes it play nice with version control systems like git and plastic. Installing Unity Clock To install this package, follow the instructions on the Package Manager documentation. Requirements This version of Unity Clock is compatible with the following versions of the Unity Editor: 2022.2 and later (recommended) Known limitations Unity Clock version 0.1.0-exp includes the following known limitations: Depends on the render-pipeline.core for setting time. This dependency will be removed in the future. Code is subject to (a lot) of change. Performance for a large amount of objects using Temporal Animations is untested. Temporal Animations are still very rigid in their use. This workflow needs to be improved. Animation events are unlikely to trigger (this will be fixed in the future)."
  }
}