name: docfx-unitypackage

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      # This step needs to happen before anything else!
      - name: Move everything inside the manual/ folder.
        run: |
          mkdir -p manual
          if [ -d Documentation~ ] && [ "$(ls -A Documentation~)" ]; then
            mv -v Documentation~/* manual/
          else
            mkdir -p Documentation~
          fi
          mv -v manual Documentation~/manual

      # Generate pages, tables of contents, the docfx.json and anything the docfx needs.

      - name: Generate index page
        run: echo 'This page redirects to the [manual](manual/).' > Documentation~/index.md

      - name: Generate main Table of Contents
        run: |
          echo '- name: Manual
            href: manual/
            homepage: manual/index.md
          - name: Scripting API
            href: api/
            homepage: api/index.md' > Documentation~/toc.yml

      - name: Generate manual Table of Contents
        # Replace * and 5 consecutive spaces with # in the Table of Contents to convert Unity's format to DocFX's format.
        run: |
          if [ -f Documentation~/manual/TableOfContents.md ]; then
            mv Documentation~/manual/TableOfContents.md Documentation~/manual/toc.md
          fi
          if [ -f Documentation~/manual/toc.md ]; then
            sed -i -e 's/*/#/g' Documentation~/manual/toc.md
            sed -i -e 's/     /#/g' Documentation~/manual/toc.md
          fi

      - name: Generate manual index page
        run: |
          if [ ! -f Documentation~/manual/index.md ] && [ -f README.md ]; then
            cp README.md Documentation~/manual/index.md
          fi

      - name: Generate api index page
        run: |
          mkdir -p Documentation~/api
          if [ -f Documentation~/api_index.md ]; then
            cp Documentation~/api_index.md Documentation~/api/index.md
            rm Documentation~/api_index.md
          else
            echo 'This is the documentation for the Scripting APIs of this package.' > Documentation~/api/index.md
          fi

      - name: Generate changelog page
        run: |
          if [ -f CHANGELOG.md ]; then
            mkdir -p Documentation~/changelog
            cp CHANGELOG.md Documentation~/changelog/CHANGELOG.md
            echo '# [Changes](CHANGELOG.md)' > Documentation~/changelog/toc.md
            echo '- name: Changelog' >> Documentation~/toc.yml
            echo '  href: changelog/' >> Documentation~/toc.yml
            echo '  homepage: changelog/CHANGELOG.md' >> Documentation~/toc.yml
          fi

      - name: Generate license page
        run: |
          if [ -f LICENSE ] && [ ! -f LICENSE.md ]; then
            mv -v LICENSE LICENSE.md
          fi
          if [ -f LICENSE.md ]; then
            mkdir -p Documentation~/license
            cp LICENSE.md Documentation~/license/LICENSE.md
            echo '# [License](LICENSE.md)' > Documentation~/license/toc.md
            if [ -f 'Third Party Notices.md' ]; then
              cp 'Third Party Notices.md' 'Documentation~/license/Third Party Notices.md'
              sed -i '1i# [Third Party Notices](Third Party Notices.md)' Documentation~/license/toc.md
            fi
            echo '- name: License' >> Documentation~/toc.yml
            echo '  href: license/' >> Documentation~/toc.yml
            echo '  homepage: license/LICENSE.md' >> Documentation~/toc.yml
          fi

      - name: Generate docfx.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          url=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')
          echo '{
              "metadata": [{
                  "src": [{"src": "..", "files": ["**/*.cs"]}],
                  "dest": "api",
                  "globalNamespaceId": "Global",
                  "allowCompilationErrors": true
              }],
              "build": {
                  "globalMetadataFiles": ["manual/projectMetadata.json", "manual/config.json"],
                  "globalMetadata": {
                      "_appFooter": "<span>Made by <a href=\"https://github.com/'$GITHUB_REPOSITORY_OWNER'\" target=\"_blank\">'$GITHUB_REPOSITORY_OWNER'</a> using <a href=\"https://dotnet.github.io/docfx\" target=\"_blank\">DocFX</a></span>",
                      "_enableSearch": true,
                      "_enableNewTab": false,
                      "_disableNewTab": true,
                      "_disableContribution": true,
                      "_disableNextArticle": true
                  },
                  "fileMetadata": {
                      "_disableContribution": {"manual/**/*.md": false}
                  },
                  "content": [
                      {"files": ["index.md", "toc.yml"]},
                      {"src": "license", "files": ["*.md"], "dest": "license"},
                      {"src": "changelog", "files": ["*.md"], "dest": "changelog"},
                      {"src": "api", "files": ["*.yml", "index.md"], "dest": "api"},
                      {"src": "manual", "files": ["*.md"], "dest": "manual"}
                  ],
                  "resource": [{"files": ["manual/images/*"]}],
                  "template": ["default", "modern"],
                  "sitemap": {"baseUrl": "'$url'"},
                  "xref": ["'$url'"],
                  "xrefService": ["https://xref.docs.microsoft.com/query?uid={uid}"],
                  "dest": "../_site"
              }
          }' > Documentation~/docfx.json

      - name: Disable toc if not exists
        run: |
          if [ ! -f Documentation~/manual/toc.md ]; then
            sed -i '19i\            "_disableToc": {"manual/**/*.md": false},' Documentation~/docfx.json
            sed -i '19i\            "_layout": {"manual/**/*.md": "landing"},'  Documentation~/docfx.json
          fi
      
      - name: Set favicon if exists
        run: |
          faviconPattern="Documentation~/manual/images/favicon.*"
          if compgen -G $faviconPattern > /dev/null; then
            favicons=( $faviconPattern )
            faviconPath=${favicons[0]}
            relativeFaviconPath=${faviconPath:15}
            sed -i '12i\            "_appFaviconPath": "'${relativeFaviconPath}'",' Documentation~/docfx.json
          fi

      - name: Set logo if exists
        run: |
          logoPattern="Documentation~/manual/images/logo.*"
          if compgen -G $logoPattern > /dev/null; then
            logos=( $logoPattern )
            logoPath=${logos[0]}
            relativeLogoPath=${logoPath:15}
            sed -i '12i\            "_appLogoPath": "'${relativeLogoPath}'",' Documentation~/docfx.json
          fi

      - name: Set app title
        run: |
          if [ -f package.json ]; then
            content=`cat package.json`
            echo 'package<<EOF' >> $GITHUB_ENV
            echo $content >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            displayName="${{ fromJson("'$content'").displayName }}"
            version="${{ fromJson("'$content'").version }}"
            sed -i '11i\            "_appTitle": "'${displayName}' | '${version}'",' Documentation~/docfx.json
          fi

      - name: Set filter if exists
        run: |
          if [ -f Documentation~/manual/filter.yml ]; then
            sed -i '5i\        "filter": "manual/filter.yml",' Documentation~/docfx.json
          elif [ -f Documentation~/manual/filter.yaml ]; then
            sed -i '5i\        "filter": "manual/filter.yaml",' Documentation~/docfx.json
          fi

      # Build docfx site through the Documentation~ folder

      - name: Dotnet Setup
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      
      - run: dotnet tool update -g docfx

      - name: Build
        run: docfx Documentation~/docfx.json

      # Generate a redirect to the manual/ page, taking protocol and custom domain names into account.
      - name: Generate redirect
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          url=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')
          sed -i '/<\/head>/i\      <meta http-equiv="refresh" content="0;URL='"$url"manual/'">' _site/index.html

      # Upload the generated documentation
      - name: Upload site artifact
        uses: actions/upload-artifact@v1
        with:
          name: _site
          path: _site # Must equals the 'build.dest' value on your docfx.json

  # Deploy the generated documentation to the gh-pages branch
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      # Download the generated documentation
      - name: Download site artifact
        uses: actions/download-artifact@v1
        with:
          name: _site

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: _site